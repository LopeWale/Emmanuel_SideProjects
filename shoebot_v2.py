# -*- coding: utf-8 -*-
"""SHOEBOT_V2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPfWgtRh161qIOtT9utYcpNY_HSKcqUO
"""

"""
Create an automated shoe buying web application created with streamlit  and takes user inputs like shoe size, quantity, release date and time, shipping and billing information and goes to a list of shoe websites like nike, footlocker, champs, dick's sporting goods and finish-line using machine learning to bypass any security check on the website and buy the shoes and sends an email to the user when process starts and ends.
"""
import streamlit as st 
import pandas as pd 
import numpy as np 
import requests
import os 
import re
from selenium import webdriver 
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup as BS 
from datetime import datetime
import time
import random
import smtplib
import ssl

# all credentials 
subject = 'Build a shoe buying web application'
body = 'Hi, lets build a web application to automate the buying of shoes.'
sender_email = 'shoe.buying.application@gmail.com'
password = 'Shoe@12345'
url_list = ['https://www.nike.com/w/mens-shoes-nik1zy7ok', 'https://www.adidas.com/us/men-shoes', 'https://www.finishline.com/store/men/shoes/athletic/_/N-8qZ1mjh', 'https://www.footlocker.com/category/mens/shoes.html', 'https://www.dickssportinggoods.com/f/mens-athletic-shoes']

# @st.cache(allow_output_mutation=True)
def scrape_data(url):
    """
    Scraping data from all the websites 
    """
    df = pd.DataFrame()
    # nike website scraping 
    if url == url_list[0]:
        driver = webdriver.Chrome('./chromedriver')
        driver.get(url)
        time.sleep(3)

        # trying to load more products on the website 
        try:
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
        except:
            pass

        content = driver.page_source
        soup = BS(content, 'html.parser')
        shoes = soup.findAll('div', {'class': 'grid-item-content'})

        # getting the shoe names, price and link 
        for shoe in shoes:
            name = shoe.find('div', {'class': 'product-card__copy-container'}).text
            price = shoe.find('div', {'class': 'product-price__value'}).text
            link = 'https://www.nike.com' + shoe.find('a')['href']
            df = df.append({'name': name, 'price': price, 'link': link}, ignore_index=True)

        driver.quit()
    
    # adidas website scraping 
    elif url == url_list[1]:
        driver = webdriver.Chrome('./chromedriver')
        driver.get(url)
        time.sleep(3)

        # trying to load more products on the website 
        try:
            load_more = driver.find_element_by_xpath("//a[@class='gl-cta gl-cta--m gl-cta--primary gl-cta--full-width gl-cta--has-arrow ']")
            load_more.click()
            time.sleep(3)
            load_more = driver.find_element_by_xpath("//a[@class='gl-cta gl-cta--m gl-cta--primary gl-cta--full-width gl-cta--has-arrow ']")
            load_more.click()
            time.sleep(3)
        except:
            pass

        content = driver.page_source
        soup = BS(content, 'html.parser')
        shoes = soup.findAll('div', {'class': 'gl-product-card'})

        # getting the shoe names, price and link 
        for shoe in shoes:
            name = shoe.find('span', {'class': 'gl-product-card__name'}).text
            price = shoe.find('span', {'class': 'gl-price'}).text
            link = shoe.find('a')['href']
            df = df.append({'name': name, 'price': price, 'link': link}, ignore_index=True)

        driver.quit()

    # finish line website scraping 
    elif url == url_list[2]:
        driver = webdriver.Chrome('./chromedriver')
        driver.get(url)
        time.sleep(3)

        # trying to load more products on the website 
        try:
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
        except:
            pass

        content = driver.page_source
        soup = BS(content, 'html.parser')
        shoes = soup.findAll('div', {'class': 'grid-item-content'})

        # getting the shoe names, price and link 
        for shoe in shoes:
            name = shoe.find('div', {'class': 'product-card__copy-container'}).text
            price = shoe.find('div', {'class': 'product-price__value'}).text
            link = 'https://www.finishline.com' + shoe.find('a')['href']
            df = df.append({'name': name, 'price': price, 'link': link}, ignore_index=True)

        driver.quit()

    # foot locker website scraping 
    elif url == url_list[3]:
        driver = webdriver.Chrome('./chromedriver')
        driver.get(url)
        time.sleep(3)

        # trying to load more products on the website 
        try:
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
        except:
            pass

        content = driver.page_source
        soup = BS(content, 'html.parser')
        shoes = soup.findAll('div', {'class': 'grid-item-content'})

        # getting the shoe names, price and link 
        for shoe in shoes:
            name = shoe.find('div', {'class': 'product-card__copy-container'}).text
            price = shoe.find('div', {'class': 'product-price__value'}).text
            link = 'https://www.footlocker.com' + shoe.find('a')['href']
            df = df.append({'name': name, 'price': price, 'link': link}, ignore_index=True)

        driver.quit()

    # dick's sporting goods website scraping 
    elif url == url_list[4]:
        driver = webdriver.Chrome('./chromedriver')
        driver.get(url)
        time.sleep(3)

        # trying to load more products on the website 
        try:
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
            load_more = driver.find_element_by_xpath("//button[@class='expand-search-content-button expand-search-items-button']")
            load_more.click()
            time.sleep(3)
        except:
            pass

        content = driver.page_source
        soup = BS(content, 'html.parser')
        shoes = soup.findAll('div', {'class': 'grid-item-content'})

        # getting the shoe names, price and link 
        for shoe in shoes:
            name = shoe.find('div', {'class': 'product-card__copy-container'}).text
            price = shoe.find('div', {'class': 'product-price__value'}).text
            link = 'https://www.dickssportinggoods.com' + shoe.find('a')['href']
            df = df.append({'name': name, 'price': price, 'link': link}, ignore_index=True)

        driver.quit()

    return df

def send_email(message):
    """
    Sending email to user
    """
    port = 465  # For SSL
    context = ssl.create_default_context()

    with smtplib.SMTP_SSL("smtp.gmail.com", port, context=context) as server:
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver_email, message)

def main():
    """
    Main function
    """
    st.title('Shoe Shopping Application')
    st.header('Welcome to the shoe shopping application')
    st.subheader('This application is designed to automate the process of buying shoes online')
    st.markdown('#### **Note**: When you enter the information for the first time and click on **Submit** button, the application will take you to the **Dashboard**, where you can enter the information for the next time and click on **Submit** button.')

    # sidebar 
    # st.sidebar.header('Shoe Shopping Application')
    # st.sidebar.markdown('This application is designed to automate the process of buying shoes online')
    # st.sidebar.markdown('#### **Note**: When you enter the information for the first time and click on **Submit** button, the application will take you to the **Dashboard**, where you can enter the information for the next time and click on **Submit** button.')

    # user information
    # st.sidebar.subheader('User Information')
    st.subheader('User Information')
    email = st.text_input('Enter your email address')

    # user inputs
    # st.sidebar.subheader('User Inputs')
    st.subheader('User Inputs')
    size = st.number_input('Enter the size of the shoe(s) you are looking for', min_value=1, max_value=20, value=9)
    quantity = st.number_input('Enter the quantity of shoe(s) you are looking for', min_value=1, max_value=10, value=1)
    release_date = st.date_input('Enter the release date of the shoe(s) you are looking for', value=datetime.today())
    release_time = st.time_input('Enter the release time of the shoe(s) you are looking for', value=datetime.time(datetime.now()))

    # billing information
    # st.sidebar.subheader('Billing Information')
    st.subheader('Billing Information')
    first_name = st.text_input('Enter your first name')
    last_name = st.text_input('Enter your last name')
    address = st.text_input('Enter your address')
    city = st.text_input('Enter your city')
    state = st.text_input('Enter your state')
    zipcode = st.number_input('Enter your zipcode')
    country = st.text_input('Enter your country')
    phone_number = st.number_input('Enter your phone number')
    card_number = st.number_input('Enter your credit/debit card number')
    expiry_date = st.date_input('Enter your credit/debit card expiry date', value=datetime.today())
    cvv = st.number_input('Enter your credit/debit card cvv number')

    # submit button
    if st.button('Submit'):
        # st.header('Dashboard')
        st.subheader('Dashboard')
        st.markdown('This is the dashboard where you can see the shoes available on the website of your choice, you can also select a website of your choice to see the shoes available on it.')

        # getting the data and putting it in a dataframe 
        df = pd.DataFrame()
        for url in url_list:
            df = df.append(scrape_data(url))
        df.reset_index(inplace=True, drop=True)

        # converting the price column to float 
        df['price'] = df['price'].str.replace('$', '')
        df['price'] = df['price'].str.replace(',', '')
        df['price'] = df['price'].astype(float)

        # choosing the website to look for shoes
        website = st.selectbox('Choose the website', ['nike', 'adidas', 'finishline', 'footlocker', 'dickssportinggoods'])
        if website == 'nike':
            df = df[df['link'].str.contains('nike.com')]
        if website == 'adidas':
            df = df[df['link'].str.contains('adidas.com')]
        if website == 'finishline':
            df = df[df['link'].str.contains('finishline.com')]
        if website == 'footlocker':
            df = df[df['link'].str.contains('footlocker.com')]
        if website == 'dickssportinggoods':
            df = df[df['link'].str.contains('dickssportinggoods.com')]
        df.reset_index(inplace=True, drop=True)

        # displaying the dataframe 
        st.dataframe(df)

        # sending email to user 
        send_email(message)
        st.success('Email sent successfully')

if __name__ == '__main__':
    main()